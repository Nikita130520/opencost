# -- Overwrite the default name of the chart
nameOverride: ""
# -- Overwrite all resources name created by the chart
fullnameOverride: ""
# -- Override the deployment namespace
namespaceOverride: ""

loglevel: info

plugins:
  enabled: false
  install:
    enabled: true
    fullImageName: curlimages/curl:latest
    securityContext:
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 1000
  folder: /opt/opencost/plugin

# -- List of secret names to use for pulling the images
imagePullSecrets: []

serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

# NetworkPolicies for ingress
networkPolicies:
  enabled: false
  prometheus:
    namespace: prometheus-system
    port: 9090
    labels:
      app.kubernetes.io/name: prometheus
  extraEgress: []

updateStrategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 1
  type: RollingUpdate

annotations: {}
podAnnotations: {}
secretAnnotations: {}
podLabels: {}
priorityClassName: ~

podSecurityContext: {}

service:
  enabled: true
  annotations: {}
  labels: {}
  type: ClusterIP
  nodePort: {}
  extraPorts: []
  loadBalancerSourceRanges: []

rbac:
  enabled: true
opencost:
  persistence:
    enabled: false
  cloudIntegrationSecret: ""
  exporter:
    apiPort: 9003
    cloudProviderApiKey: ""
    defaultClusterId: 'default-cluster'
    image:
      registry: ghcr.io
      repository: opencost/opencost
      tag: "1.113.0@sha256:b313d6d320058bbd3841a948fb636182f49b46df2368d91e2ae046ed03c0f83c"
      pullPolicy: IfNotPresent
    extraArgs: []
    replicas: 1
    resources:
      requests:
        cpu: '10m'
        memory: '55Mi'
      limits:
        cpu: '999m'
        memory: '1Gi'
    startupProbe:
      enabled: true
      path: /healthz
      initialDelaySeconds: 10
      periodSeconds: 5
      failureThreshold: 30
    livenessProbe:
      enabled: true
      path: /healthz
      initialDelaySeconds: 10
      periodSeconds: 20
      failureThreshold: 3
    readinessProbe:
      enabled: true
      path: /healthz
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 3
    securityContext: {}

  customPricing:
    enabled: false
    configmapName: custom-pricing-model
    configPath: /tmp/custom-config
    createConfigmap: true
    provider: custom
    costModel:
      description: Modified pricing configuration.
      CPU: 1.25
      spotCPU: 0.006655
      RAM: 0.50
      spotRAM: 0.000892
      GPU: 0.95
      storage: 0.25
      zoneNetworkEgress: 0.01
      regionNetworkEgress: 0.01
      internetNetworkEgress: 0.12

  dataRetention:
    dailyResolutionDays: 15

  carbonCost:
    enabled: false

  cloudCost:
    enabled: false
    refreshRateHours: 6
    runWindowDays: 3
    monthToDateInterval: 6
    queryWindowDays: 7

  metrics:
    kubeStateMetrics:
      emitPodAnnotations: ~
      emitNamespaceAnnotations: ~
      emitKsmV1Metrics: ~
      emitKsmV1MetricsOnly: ~
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s
      additionalLabels:
        cluster: multi-cluster  # Replace with your actual cluster name
      namespace: ""  # Replace with your cluster's namespace
      relabelings:
        - sourceLabels: [__meta_kubernetes_pod_label_kubernetes_io_hostname]
          targetLabel: cloudprovider
          action: replace
    serviceMonitorExtraLabels: []
    serviceMonitorExtraRelabelings: []

  prometheus:
    prometheusQueryOverrides:
    kube_persistentvolumeclaim_info: "kube_persistentvolumeclaim_info{persistentvolumeclaim!='prom-agent-kps-kube-prometheus-stack-prometheus-db-prom-agent-kps-kube-prometheus-stack-prometheus-0'}"
    kube_persistentvolumeclaim_resource_requests_storage_bytes: "kube_persistentvolumeclaim_resource_requests_storage_bytes{persistentvolumeclaim!='prom-agent-kps-kube-prometheus-stack-prometheus-db-prom-agent-kps-kube-prometheus-stack-prometheus-0'}"
    opencost:
    secret_name: ~
    existingSecretName: ~
    username: "prometheus"
    username_key: DB_BASIC_AUTH_USERNAME
    password: "kdjAj8xEa8ZlYqosrTeYZfFjFN7tGl"
    password_key: DB_BASIC_AUTH_PW
    bearer_token: ""
    external:
      enabled: true
      url: "https://prometheus.mosaic.siemens-energy.cloud"
    internal:
      enabled: false
    amp:
      enabled: false
    thanos:
      enabled: false

  ui:
    enabled: true
    image:
      registry: ghcr.io
      repository: opencost/opencost-ui
      tag: "1.113.0@sha256:4f408cf765217f889f4cb5cfcc97356e09892045a6ec951b27817a42ecb6748d"
      pullPolicy: IfNotPresent
    resources:
      requests:
        cpu: '10m'
        memory: '55Mi'
      limits:
        cpu: '999m'
        memory: '1Gi'
    uiPort: 9090
    livenessProbe:
      enabled: true
      path: /healthz
      initialDelaySeconds: 30
      periodSeconds: 10
      failureThreshold: 3
    readinessProbe:
      enabled: true
      path: /healthz
      initialDelaySeconds: 30
      periodSeconds: 10
      failureThreshold: 3
    securityContext: {}

    extraEnv: []

    extraVolumeMounts: []

    ingress:
      enabled: false
      ingressClassName: ""
      annotations: {}
      hosts:
        - host: example.local
          paths:
            - /
      servicePort: http-ui
      tls: []

  sigV4Proxy:
    image: public.ecr.aws/aws-observability/aws-sigv4-proxy:latest
    imagePullPolicy: IfNotPresent
    name: aps
    port: 8005
    region: us-west-2
    host: aps-workspaces.us-west-2.amazonaws.com
    extraEnv: []
    resources: {}
    securityContext: {}

tolerations: []
nodeSelector: {}
affinity: {}
topologySpreadConstraints: []

